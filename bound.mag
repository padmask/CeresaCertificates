// examples:
/*
P2<x,y,z> := ProjectiveSpace(Q,2);
// curves[66]
c := Curve(P2,-x^4 - x^3*y - x^2*y^2 - x*y^3 - y^4 - x^3*z - x^2*y*z - x*y^2*z + y^3*z - x^2*z^2 - x*y*z^2 + y^2*z^2 - x*z^3 + y*z^3 - z^4);
bound_to(c,50); // returns 24
nf := QuadraticField(5);
bound_to_nf(ChangeRing(c,nf),50); // returns 256 
*/

// the basic upper bound (see slides and future paper).
// We find the roots of the polynomial, presumably
// the numerator of the zeta function, and then find the products of sets
// of 3 roots that are not of the form r1, p/r1, r2.
function easy_bound(pol)
  // make sure conventions are consistent
  if LeadingCoefficient(pol) ne 1 then pol := Reverse(pol); end if;
  sf := SplittingField(pol);
  rts := [x[1]: i in [1..x[2]], x in Roots(pol,sf)];
  prod3 := {*&*[rts[i]: i in s]: s in Subsets({1..Degree(pol)},3)*};
  _,q := IsPower(Coefficient(pol,0),3);
  wedge := {*r*q: r in rts*};
  assert wedge subset prod3;
  eval_m := prod3 diff wedge;
  bd := Z!&*[x-1: x in eval_m];
  return bd;
end function;

// compute the bound for the reduction of a curve mod p
function bound(c,p)
  cp := ChangeRing(c,GF(p));
  if IsSingular(cp) then return 0; end if;
  zf := Numerator(ZetaFunction(cp));
  return easy_bound(zf);
end function;

// compute the bound for all primes up to a given value
// it's easy enough to adapt this to, e.g., primes that split in a given
// extension, to deal with twists, for example
function old_bound_to(c,b:strict := false)
  bd := 0;
  for p in PrimesUpTo(b) do
    bd := GCD(bd,bound(c,p));
    if not strict and bd eq &*[p^Valuation(bd,p): p in [2,3,5]] then return bd; end if;
  end for;
  return bd;
end function;

// Given a collection of pairs <p,n_p>, find the largest positive integer
// that divides every n_p in Z[1/p].
function gcd_ignore_p(pairs)
  error if exists{i: i in pairs|not IsPrime(i[1])}, "can only ignore primes";
  pairs := {x: x in pairs|x[2] ne 0};
  if #pairs le 1 then return 0; end if;
  gcd := &*[p^Min([Valuation(x[2],p): x in pairs|x[1] ne p]): p in Set(&cat [PrimeDivisors(i[2]): i in pairs])];
  return gcd;
end function;

// Jordan and Padma realized that reducing mod p doesn't actually give
// any p-adic information about the bound, or at least that it's more
// complicated and we don't actually want to work it out
function bound_to(c,b:strict := false)
  bd := 0;
  p_bds := [];
  for p in PrimesUpTo(b) do
    Append(~p_bds,<p,bound(c,p)>);
    bd := gcd_ignore_p(p_bds);
    if bd eq 1 or (not strict and bd ne 0 and Max(PrimeDivisors(bd)) le 5) then return bd; end if;
  end for;
  return bd;
end function;
  

function bound_nf(c,p)
  qp,toqp := ResidueClassField(p);
  if exists{x: x in Coefficients(DefiningPolynomial(c))|Valuation(x,p) lt 0} then return 0; end if;
  P2qp := ProjectiveSpace(qp,2);
  cp := Curve(P2qp,&+[rep{r: r in qp|Valuation(MonomialCoefficient(DefiningPolynomial(c),m)-r@@toqp,p) gt 0}*CoordinateRing(P2qp)!m: m in Monomials(DefiningPolynomial(c))]);
  if IsSingular(cp) then return 0; end if;
  zf := Numerator(ZetaFunction(cp));
  return easy_bound(zf);
end function;

function old_bound_to_nf(c,b: strict := false)
  bd := 0;
  nf := FieldOfFractions(BaseRing(c));
  for p in PrimesUpTo(b,nf) do
    bd := GCD(bd,bound_nf(c,p));
    if not strict and bd eq &*[p^Valuation(bd,p): p in [2,3,5]] then return bd; end if;
  end for;
  return bd;
end function;
  
function bound_to_nf(c,b: strict := false)
  bd := 0;
  p_bds := [];
  nf := FieldOfFractions(BaseRing(c));
  for p in PrimesUpTo(b,nf) do
    Append(~p_bds,<Minimum(p),bound_nf(c,p)>);
    bd := gcd_ignore_p(p_bds);
    if not strict and bd ne 0 and (bd eq 1 or Max(PrimeDivisors(bd)) le 5) then return bd; end if;
  end for;
  return bd;
end function;
  
// painful attempt to find a formula in terms of the coefficients; the
// computation is so fast that it isn't necessary to do this
/*procedure generic(~formula)
  Q4<a,b,c,t> := FunctionField(Q,4);
  Q4u<u> := PolynomialRing(Q4);
  pol := Q4u![t^3,t^2*a,t*b,c,b,a,1];

  Q6 := FunctionField(Q,6);
  genpol := Polynomial(Append([Q6.i: i in [1..6]],1));
  sym3s := [&*[Q6.i: i in s]: s in Subsets({1..6},3)];
  coefs := [&+[&*[sym3s[i]: i in s]: s in Subsets({1..20},n)]: n in [1..20]];
  sym_pols := [Q6|x where _,x is IsSymmetric(i): i in coefs[1..10]];
  flip_coefs := [Evaluate(i,[1/Q6.j: j in [1..6]])];
  // sfa := SymmetricFunctionAlgebra(Q);
  // sym_coefs := [sfa!i: i in coefs];
end procedure;*/

